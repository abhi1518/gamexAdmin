{"ast":null,"code":"// api.js\nimport axios from 'axios';\nconst API_BASE_URL = 'http://localhost:4000';\nconst handleResponse = response => {\n  if (response.status !== 200) {\n    throw new Error('Network response was not ok.');\n  }\n  return response.data;\n};\nexport const blogPost = async formData => {\n  try {\n    const requestOptions = {\n      method: 'post',\n      url: `${API_BASE_URL}/blog/blogpost`,\n      data: formData\n    };\n    const response = await axios(requestOptions);\n    return handleResponse(response);\n  } catch (error) {\n    throw new Error('Error registering user.');\n  }\n};\nexport const getAllUser = async () => {\n  try {\n    const requestOptions = {\n      method: 'get',\n      url: `${API_BASE_URL}/getalluser`\n      // data: formData,\n    };\n\n    const response = await axios(requestOptions);\n    return handleResponse(response);\n  } catch (error) {\n    throw new Error('Error registering user.');\n  }\n};\nexport const getUserByUsername = async userName => {\n  try {\n    const requestOptions = {\n      method: 'get',\n      url: `${API_BASE_URL}/search/${userName}`\n      // url: `${API_BASE_URL}/search/abhishek`,\n      // data: formData,\n    };\n\n    const response = await axios(requestOptions);\n    return handleResponse(response);\n  } catch (error) {\n    throw new Error('Error registering user.');\n  }\n};\nexport const blockUser = async phoneNumber => {\n  try {\n    const myHeaders = new Headers();\n    myHeaders.append('Content-Type', 'application/json');\n    const raw = JSON.stringify({\n      phoneNumber,\n      blocked: true\n    });\n    const requestOptions = {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow'\n    };\n    const response = await fetch(`${API_BASE_URL}/block-user`, requestOptions);\n    const result = await response.text();\n    return result;\n  } catch (error) {\n    throw new Error('Error blocking user.');\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","handleResponse","response","status","Error","data","blogPost","formData","requestOptions","method","url","error","getAllUser","getUserByUsername","userName","blockUser","phoneNumber","myHeaders","Headers","append","raw","JSON","stringify","blocked","headers","body","redirect","fetch","result","text"],"sources":["/Users/apple/Desktop/gitGamexAdmin/src/api.js"],"sourcesContent":["// api.js\nimport axios from 'axios';\n\nconst API_BASE_URL = 'http://localhost:4000';\n\nconst handleResponse = (response) => {\n  if (response.status !== 200) {\n    throw new Error('Network response was not ok.');\n  }\n  return response.data;\n};\n\n\n\nexport const blogPost = async (formData) => {\n  try {\n    const requestOptions = {\n      method: 'post',\n      url: `${API_BASE_URL}/blog/blogpost`,\n      data: formData,\n    };\n\n    const response = await axios(requestOptions);\n    return handleResponse(response);\n  } catch (error) {\n    throw new Error('Error registering user.');\n  }\n};\n\nexport const getAllUser = async () => {\n  try {\n    const requestOptions = {\n      method: 'get',\n      url: `${API_BASE_URL}/getalluser`,\n      // data: formData,\n    };\n\n    const response = await axios(requestOptions);\n    return handleResponse(response);\n  } catch (error) {\n    throw new Error('Error registering user.');\n  }\n};\n\n\nexport const getUserByUsername = async (userName) => {\n  try {\n    const requestOptions = {\n      method: 'get',\n      url: `${API_BASE_URL}/search/${userName}`,\n      // url: `${API_BASE_URL}/search/abhishek`,\n      // data: formData,\n    };\n\n    const response = await axios(requestOptions);\n    return handleResponse(response);\n  } catch (error) {\n    throw new Error('Error registering user.');\n  }\n};\n\nexport const blockUser = async (phoneNumber) => {\n  try {\n    const myHeaders = new Headers();\n    myHeaders.append('Content-Type', 'application/json');\n\n    const raw = JSON.stringify({\n      phoneNumber,\n      blocked: true,\n    });\n\n    const requestOptions = {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow',\n    };\n\n    const response = await fetch(`${API_BASE_URL}/block-user`, requestOptions);\n    const result = await response.text();\n    return result;\n  } catch (error) {\n    throw new Error('Error blocking user.');\n  }\n};\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,uBAAuB;AAE5C,MAAMC,cAAc,GAAIC,QAAQ,IAAK;EACnC,IAAIA,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;IAC3B,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;EACjD;EACA,OAAOF,QAAQ,CAACG,IAAI;AACtB,CAAC;AAID,OAAO,MAAMC,QAAQ,GAAG,MAAOC,QAAQ,IAAK;EAC1C,IAAI;IACF,MAAMC,cAAc,GAAG;MACrBC,MAAM,EAAE,MAAM;MACdC,GAAG,EAAG,GAAEV,YAAa,gBAAe;MACpCK,IAAI,EAAEE;IACR,CAAC;IAED,MAAML,QAAQ,GAAG,MAAMH,KAAK,CAACS,cAAc,CAAC;IAC5C,OAAOP,cAAc,CAACC,QAAQ,CAAC;EACjC,CAAC,CAAC,OAAOS,KAAK,EAAE;IACd,MAAM,IAAIP,KAAK,CAAC,yBAAyB,CAAC;EAC5C;AACF,CAAC;AAED,OAAO,MAAMQ,UAAU,GAAG,YAAY;EACpC,IAAI;IACF,MAAMJ,cAAc,GAAG;MACrBC,MAAM,EAAE,KAAK;MACbC,GAAG,EAAG,GAAEV,YAAa;MACrB;IACF,CAAC;;IAED,MAAME,QAAQ,GAAG,MAAMH,KAAK,CAACS,cAAc,CAAC;IAC5C,OAAOP,cAAc,CAACC,QAAQ,CAAC;EACjC,CAAC,CAAC,OAAOS,KAAK,EAAE;IACd,MAAM,IAAIP,KAAK,CAAC,yBAAyB,CAAC;EAC5C;AACF,CAAC;AAGD,OAAO,MAAMS,iBAAiB,GAAG,MAAOC,QAAQ,IAAK;EACnD,IAAI;IACF,MAAMN,cAAc,GAAG;MACrBC,MAAM,EAAE,KAAK;MACbC,GAAG,EAAG,GAAEV,YAAa,WAAUc,QAAS;MACxC;MACA;IACF,CAAC;;IAED,MAAMZ,QAAQ,GAAG,MAAMH,KAAK,CAACS,cAAc,CAAC;IAC5C,OAAOP,cAAc,CAACC,QAAQ,CAAC;EACjC,CAAC,CAAC,OAAOS,KAAK,EAAE;IACd,MAAM,IAAIP,KAAK,CAAC,yBAAyB,CAAC;EAC5C;AACF,CAAC;AAED,OAAO,MAAMW,SAAS,GAAG,MAAOC,WAAW,IAAK;EAC9C,IAAI;IACF,MAAMC,SAAS,GAAG,IAAIC,OAAO,EAAE;IAC/BD,SAAS,CAACE,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAC;IAEpD,MAAMC,GAAG,GAAGC,IAAI,CAACC,SAAS,CAAC;MACzBN,WAAW;MACXO,OAAO,EAAE;IACX,CAAC,CAAC;IAEF,MAAMf,cAAc,GAAG;MACrBC,MAAM,EAAE,MAAM;MACde,OAAO,EAAEP,SAAS;MAClBQ,IAAI,EAAEL,GAAG;MACTM,QAAQ,EAAE;IACZ,CAAC;IAED,MAAMxB,QAAQ,GAAG,MAAMyB,KAAK,CAAE,GAAE3B,YAAa,aAAY,EAAEQ,cAAc,CAAC;IAC1E,MAAMoB,MAAM,GAAG,MAAM1B,QAAQ,CAAC2B,IAAI,EAAE;IACpC,OAAOD,MAAM;EACf,CAAC,CAAC,OAAOjB,KAAK,EAAE;IACd,MAAM,IAAIP,KAAK,CAAC,sBAAsB,CAAC;EACzC;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}