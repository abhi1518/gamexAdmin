{"ast":null,"code":"// api.js\nimport axios from 'axios';\nconst API_BASE_URL = 'http://localhost:80';\nconst handleResponse = response => {\n  if (response.status !== 200) {\n    throw new Error('Network response was not ok.');\n  }\n  return response.data;\n};\nexport const loginUser = async (username, password) => {\n  try {\n    const requestOptions = {\n      method: 'post',\n      url: `${API_BASE_URL}/admin/admin-login`,\n      // url: 'http://localhost:80/admin/admin-login', // Replace with your actual API endpoint\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      data: {\n        username: username,\n        password: password\n      }\n    };\n    const response = await axios(requestOptions);\n    return handleResponse(response);\n  } catch (error) {\n    throw new Error('Error during login.');\n  }\n};\nexport const registerAdminAgent = async userData => {\n  try {\n    const requestOptions = {\n      method: 'POST',\n      url: `${API_BASE_URL}/admin/admin-agent`,\n      // url: 'http://localhost:80/admin/admin-agent', // Replace with your actual API endpoint\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      data: JSON.stringify(userData)\n    };\n    const response = await axios(requestOptions);\n    return handleResponse(response);\n  } catch (error) {\n    throw new Error('Error during registration.');\n  }\n};\nexport const getAllUser = async () => {\n  try {\n    const requestOptions = {\n      method: 'get',\n      url: `${API_BASE_URL}/getalluser`\n    };\n    const response = await axios(requestOptions);\n    return handleResponse(response);\n  } catch (error) {\n    throw new Error('Error registering user.');\n  }\n};\nexport const getUserByUsername = async userName => {\n  try {\n    const requestOptions = {\n      method: 'get',\n      url: `${API_BASE_URL}/search/${userName}`\n    };\n    const response = await axios(requestOptions);\n    return handleResponse(response);\n  } catch (error) {\n    throw new Error('Error registering user.');\n  }\n};\nexport const blockUser = async phoneNumber => {\n  try {\n    const myHeaders = new Headers();\n    myHeaders.append('Content-Type', 'application/json');\n    const raw = JSON.stringify({\n      phoneNumber,\n      blocked: true\n    });\n    const requestOptions = {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow'\n    };\n    const response = await fetch(`${API_BASE_URL}/block-user`, requestOptions);\n    const result = await response.text();\n    return result;\n  } catch (error) {\n    throw new Error('Error blocking user.');\n  }\n};\nexport const unblockUser = async phoneNumber => {\n  try {\n    const myHeaders = new Headers();\n    myHeaders.append('Content-Type', 'application/json');\n    const raw = JSON.stringify({\n      phoneNumber,\n      blocked: true\n    });\n    const requestOptions = {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow'\n    };\n    const response = await fetch(`${API_BASE_URL}/unblock-user`, requestOptions);\n    const result = await response.text();\n    return result;\n  } catch (error) {\n    throw new Error('Error blocking user.');\n  }\n};\nexport const getAllAdminAgent = async () => {\n  try {\n    const requestOptions = {\n      method: 'get',\n      url: `${API_BASE_URL}/admin/all-admin-agent`\n    };\n    const response = await axios(requestOptions);\n    return handleResponse(response);\n  } catch (error) {\n    throw new Error('Error registering user.');\n  }\n};\nexport const getAdminAgentByUsername = async userName => {\n  try {\n    const requestOptions = {\n      method: 'get',\n      url: `${API_BASE_URL}/admin/admin-agent/${userName}`\n    };\n    const response = await axios(requestOptions);\n    return handleResponse(response);\n  } catch (error) {\n    throw new Error('Error registering user.');\n  }\n};\nexport const blockAdminAgent = async userName => {\n  try {\n    const requestOptions = {\n      method: 'get',\n      url: `${API_BASE_URL}/admin/admin-agent/block/${userName}`\n    };\n    const response = await axios(requestOptions);\n    return handleResponse(response);\n  } catch (error) {\n    throw new Error('Error registering user.');\n  }\n};\nexport const unblockAdminAgent = async userName => {\n  try {\n    const requestOptions = {\n      method: '',\n      url: `${API_BASE_URL}/admin/admin-agent/unblock/${userName}`\n    };\n    const response = await axios(requestOptions);\n    return handleResponse(response);\n  } catch (error) {\n    throw new Error('Error registering user.');\n  }\n};\n\n// export const blockAdminAgent = async (phoneNumber) => {\n//   try {\n//     const myHeaders = new Headers();\n//     myHeaders.append('Content-Type', 'application/json');\n\n//     const raw = JSON.stringify({\n//       phoneNumber,\n//       blocked: true,\n//     });\n\n//     const requestOptions = {\n//       method: 'POST',\n//       headers: myHeaders,\n//       body: raw,\n//       redirect: 'follow',\n//     };\n\n//     const response = await fetch(`${API_BASE_URL}/admin/admin-agent/block/:username`, requestOptions);\n//     const result = await response.text();\n//     return result;\n//   } catch (error) {\n//     throw new Error('Error blocking user.');\n//   }\n// };\n\n// export const unblockAdminAgent = async (phoneNumber) => {\n//   try {\n//     const myHeaders = new Headers();\n//     myHeaders.append('Content-Type', 'application/json');\n\n//     const raw = JSON.stringify({\n//       phoneNumber,\n//       blocked: true,\n//     });\n\n//     const requestOptions = {\n//       method: 'POST',\n//       headers: myHeaders,\n//       body: raw,\n//       redirect: 'follow',\n//     };\n\n//     const response = await fetch(`${API_BASE_URL}/unblock-user`, requestOptions);\n//     const result = await response.text();\n//     return result;\n//   } catch (error) {\n//     throw new Error('Error blocking user.');\n//   }\n// };","map":{"version":3,"names":["axios","API_BASE_URL","handleResponse","response","status","Error","data","loginUser","username","password","requestOptions","method","url","headers","error","registerAdminAgent","userData","JSON","stringify","getAllUser","getUserByUsername","userName","blockUser","phoneNumber","myHeaders","Headers","append","raw","blocked","body","redirect","fetch","result","text","unblockUser","getAllAdminAgent","getAdminAgentByUsername","blockAdminAgent","unblockAdminAgent"],"sources":["/Users/apple/Desktop/gitGamexAdmin/src/api.js"],"sourcesContent":["// api.js\nimport axios from 'axios';\n\nconst API_BASE_URL = 'http://localhost:80';\n\nconst handleResponse = (response) => {\n  if (response.status !== 200) {\n    throw new Error('Network response was not ok.');\n  }\n  return response.data;\n};\n\nexport const loginUser = async (username, password) => {\n  try {\n    const requestOptions = {\n      method: 'post',\n      url: `${API_BASE_URL}/admin/admin-login`,\n      // url: 'http://localhost:80/admin/admin-login', // Replace with your actual API endpoint\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      data: {\n        username: username,\n        password: password,\n      },\n    };\n\n    const response = await axios(requestOptions);\n    return handleResponse(response);\n  } catch (error) {\n    throw new Error('Error during login.');\n  }\n};\n\nexport const registerAdminAgent = async (userData) => {\n  try {\n    const requestOptions = {\n      method: 'POST',\n      url: `${API_BASE_URL}/admin/admin-agent`,\n      // url: 'http://localhost:80/admin/admin-agent', // Replace with your actual API endpoint\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      data: JSON.stringify(userData),\n    };\n\n    const response = await axios(requestOptions);\n    return handleResponse(response);\n  } catch (error) {\n    throw new Error('Error during registration.');\n  }\n};\n\n\nexport const getAllUser = async () => {\n  try {\n    const requestOptions = {\n      method: 'get',\n      url: `${API_BASE_URL}/getalluser`,\n    };\n\n    const response = await axios(requestOptions);\n    return handleResponse(response);\n  } catch (error) {\n    throw new Error('Error registering user.');\n  }\n};\n\nexport const getUserByUsername = async (userName) => {\n  try {\n    const requestOptions = {\n      method: 'get',\n      url: `${API_BASE_URL}/search/${userName}`,\n    };\n\n    const response = await axios(requestOptions);\n    return handleResponse(response);\n  } catch (error) {\n    throw new Error('Error registering user.');\n  }\n};\n\nexport const blockUser = async (phoneNumber) => {\n  try {\n    const myHeaders = new Headers();\n    myHeaders.append('Content-Type', 'application/json');\n\n    const raw = JSON.stringify({\n      phoneNumber,\n      blocked: true,\n    });\n\n    const requestOptions = {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow',\n    };\n\n    const response = await fetch(`${API_BASE_URL}/block-user`, requestOptions);\n    const result = await response.text();\n    return result;\n  } catch (error) {\n    throw new Error('Error blocking user.');\n  }\n};\n\nexport const unblockUser = async (phoneNumber) => {\n  try {\n    const myHeaders = new Headers();\n    myHeaders.append('Content-Type', 'application/json');\n\n    const raw = JSON.stringify({\n      phoneNumber,\n      blocked: true,\n    });\n\n    const requestOptions = {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow',\n    };\n\n    const response = await fetch(`${API_BASE_URL}/unblock-user`, requestOptions);\n    const result = await response.text();\n    return result;\n  } catch (error) {\n    throw new Error('Error blocking user.');\n  }\n};\n\nexport const getAllAdminAgent = async () => {\n  try {\n    const requestOptions = {\n      method: 'get',\n      url: `${API_BASE_URL}/admin/all-admin-agent`,\n    };\n\n    const response = await axios(requestOptions);\n    return handleResponse(response);\n  } catch (error) {\n    throw new Error('Error registering user.');\n  }\n};\n\nexport const getAdminAgentByUsername = async (userName) => {\n  try {\n    const requestOptions = {\n      method: 'get',\n      url: `${API_BASE_URL}/admin/admin-agent/${userName}`,\n    };\n\n    const response = await axios(requestOptions);\n    return handleResponse(response);\n  } catch (error) {\n    throw new Error('Error registering user.');\n  }\n};\n\nexport const blockAdminAgent = async (userName) => {\n  try {\n    const requestOptions = {\n      method: 'get',\n      url: `${API_BASE_URL}/admin/admin-agent/block/${userName}`,\n    };\n\n    const response = await axios(requestOptions);\n    return handleResponse(response);\n  } catch (error) {\n    throw new Error('Error registering user.');\n  }\n};\n\nexport const unblockAdminAgent = async (userName) => {\n  try {\n    const requestOptions = {\n      method: '',\n      url: `${API_BASE_URL}/admin/admin-agent/unblock/${userName}`,\n    };\n\n    const response = await axios(requestOptions);\n    return handleResponse(response);\n  } catch (error) {\n    throw new Error('Error registering user.');\n  }\n};\n\n// export const blockAdminAgent = async (phoneNumber) => {\n//   try {\n//     const myHeaders = new Headers();\n//     myHeaders.append('Content-Type', 'application/json');\n\n//     const raw = JSON.stringify({\n//       phoneNumber,\n//       blocked: true,\n//     });\n\n//     const requestOptions = {\n//       method: 'POST',\n//       headers: myHeaders,\n//       body: raw,\n//       redirect: 'follow',\n//     };\n\n//     const response = await fetch(`${API_BASE_URL}/admin/admin-agent/block/:username`, requestOptions);\n//     const result = await response.text();\n//     return result;\n//   } catch (error) {\n//     throw new Error('Error blocking user.');\n//   }\n// };\n\n// export const unblockAdminAgent = async (phoneNumber) => {\n//   try {\n//     const myHeaders = new Headers();\n//     myHeaders.append('Content-Type', 'application/json');\n\n//     const raw = JSON.stringify({\n//       phoneNumber,\n//       blocked: true,\n//     });\n\n//     const requestOptions = {\n//       method: 'POST',\n//       headers: myHeaders,\n//       body: raw,\n//       redirect: 'follow',\n//     };\n\n//     const response = await fetch(`${API_BASE_URL}/unblock-user`, requestOptions);\n//     const result = await response.text();\n//     return result;\n//   } catch (error) {\n//     throw new Error('Error blocking user.');\n//   }\n// };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}